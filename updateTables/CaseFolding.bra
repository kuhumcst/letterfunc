{CaseFolding.bra

Read CaseFolding-15.0.0.txt and convert to Full and Simple tables in C.

Produces 
    casefolding.h
    casefolding.c
    
and also
    CaseFolding.html,
    LOW
    COMB
    K
    let
    l2u
    l2us
    u2l
    u2ls
    cletters.c
    letters
    
You need to install Bracmat to run this script:

    git clone https://github.com/BartJongejan/Bracmat.git
    
After installing, start bracmat and then, after the prompt, type:

    get$"Casefolding.bra"
}

X=
  (CaseFoldingFileName="CaseFolding-15.0.0.txt")
  (UnicodeDataDate="2022-08-03 17:00")
  (TurkicN=)
  (SimpleN=)
  (FullN=)
  (CommonN=)
  (TurkicMin=)
  (SimpleMin=)
  (UpperMin=)
  (LowerMin=)
  (COMBN=)
  (COMBMin=)
  (FullMin=)
  (COMB=)
  (Small2Capital=)
  (Common=)
  (Full=)
  (Simple=)
  (Turkic=)
  (Upper=)
  (Lower=)
  ( readFile
  =   file hexIn type hexOut comment 16210 off
    .   get$(!arg,STR):?file
      & out$fileRead
      & 10+-1*asc$A:?off
      &   0
        : ?(its.Full)
        : ?(its.Simple)
        : ?(its.Turkic)
        : ?(its.Common)
      & ( 16210
        =   n k
          .   0:?nn
            &   whl
              ' ( @(!arg:%@?k ?arg)
                & (   !k:>" "
                    & 16*!nn:?16n
                    &     16*!nn
                        + (!k:#|!off+asc$!k)
                      : ?nn
                  | 
                  )
                )
            & !nn
        )
      &   whl
        ' ( @(!file:%?line \n ?file)
          & ( @(!line:"#" ?)
            |   @( !line
                 : ?hexIn "; " ?type "; " ?hexOut "; #" ?comment
                 )
              & 16210$!hexIn:?decIn
              & :?decOut
              &   whl
                ' ( @( !hexOut
                     :   %?hex
                         (" " ?hexOut|:?hexOut)
                     )
                  & !decOut 16210$!hex:?decOut
                  )
              & ( !decout:% %
                |   @(!comment:? CAPITAL ?)
                  &     (!decOut.!decIn.!comment)
                      + !(its.Small2Capital)
                    : ?(its.Small2Capital)
                | 
                )
              &   !type
                : (   F
                    &   (!decIn.!decOut.!comment)+!(its.Full)
                      : ?(its.Full)
                  |   S
                    &   (!decIn.!decOut.!comment)+!(its.Simple)
                      : ?(its.Simple)
                  |   T
                    &   (!decIn.!decOut.!comment)+!(its.Turkic)
                      : ?(its.Turkic)
                  |   C
                    &   (!decIn.!decOut.!comment)+!(its.Common)
                      : ?(its.Common)
                  | out$ONBEKEND !line&get'
                  )
            | 
            )
          )
  )
  ( 2html
  =   
    .   ( writes
        =   L
          .   :?L
            &   whl
              ' ( !arg:%?n ?arg
                & !L "&#" !n ";":?L
                )
            & !L
        )
      & ( writeList
        =   unfolded folded comm
          .     put
              $ ( str$("<h1>" !arg "</h1>\n")
                , "CaseFolding.html"
                , APP BIN
                )
            & !(its.!arg):?arg
            &     str
                $ ( "<table>"
                    ( :?L
                    &   whl
                      ' (   !arg
                          :   (?unfolded.?folded.?cap.?comm.?full)
                            + ?arg
                        &     "<tr><td>&#"
                              !unfolded
                              ";</td><td>&#"
                              !folded
                              ";</td><td>"
                              writes$!cap
                              "</td><td>"
                              writes$!full
                              "</td><td>"
                              !comm
                              "</td></tr>"
                              \n
                              !L
                          : ?L
                        )
                    & !L
                    )
                    "</table>"
                  )
              : ?L
            & put$(!L,"CaseFolding.html",APP BIN)
        )
      & put$("<html><body>
","CaseFolding.html",NEW BIN)
      & writeList$COMB
      & put$("</body></html>","CaseFolding.html",APP BIN)
  )
  ( UpperLower
  =   upper lower
    .   0:?upper:?lower
      & ( filter
        =   A Z unfolded folded comm
          .   !(its.!arg):?arg
            & ( shorter
              =   a b A B
                .   !arg:(?a.?b)
                  & den$(sim$(!a,)):?A
                  & den$(sim$(!b,)):?B
                  & !A+-1*!B:<0
              )
            &   whl
              ' (   !arg
                  : (?unfolded.%?folded ?.?comm)+?arg
                & (   !lower:?A+(!folded.?k)+?Z
                    & (   shorter$(!comm.!k)
                        & !A+(!folded.!comm)+!Z:?lower
                      | 
                      )
                  | (!folded.!comm)+!lower:?lower
                  )
                & (   @(!comm:? SMALL ?)
                    & ( !lower:?+(!unfolded.?)+?
                      | (!unfolded.!comm)+!lower:?lower
                      )
                  |   @(!comm:? CAPITAL ?)
                    & ( !upper:?+(!unfolded.?)+?
                      | (!unfolded.!comm)+!upper:?upper
                      )
                  | 
                  )
                )
        )
      & filter$Full
      & filter$Simple
      & filter$Turkic
      & !upper:?(its.Upper)
      & !lower:?(its.Lower)
  )
  ( count
  =   n
    .   0:?n
      &   whl
        ' (!arg:%+?arg&1+!n:?n)
      & !n
  )
  ( 2List
  =   C L
    .   !arg
      |   :?L
        &   whl
          ' (!arg:%?C+?arg&!C !L:?L)
        & !L
  )
  ( store
  =   min all rij n A B n nn occ
    .   (its.count)$!arg:?min
      & 1:?occ
      & div$(!min,!occ):?min
      &   whl
        ' ( !arg:?all
          & new$hash:?rij
          &   whl
            ' ( !all:(?n.?)+?all
              & mod$(!n,!min):?adr
              & ( (rij..find)$!adr&`~
                | (rij..insert)$(!adr.!n)
                )
              )
          & ( 
            | (rij..forall)$out&get'
            )
          & !all:~0
          & 1+!min:?min
          )
      & out$(min !min)
      & (!min.!rij)
  )
  ( writeC
  =     all
        n
        N
        c
        rij
        Nfull
        Nsimple
        Nupper
        Nlower
    .   !(its.COMBMin):?arg
      & out$writeC
      & !(its.COMB):?all
      & 0:?fulls
      &   whl
        ' (   !all
            : (?Unfolded.?Simple.?Capital.?Comment.?Full)+?all
          & ( !Full:
            |   !fulls:?A+(!Full.?c)+?Z
              & !A+(!Full.!c "*//*" !Comment)+!Z:?fulls
            | (!Full.!Comment)+!fulls:?fulls
            )
          )
      & !fulls:?+[?NFulls
      & out$(NFulls !NFulls)
      &   put
        $ (   str
            $ ( "/*
LETTERFUNC - Unicode support

Copyright (C) 2012  Center for Sprogteknologi, University of Copenhagen

This file is part of LETTERFUNC.

LETTERFUNC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

LETTERFUNC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with LETTERFUNC; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#ifndef CASEFOLDING_H
#define CASEFOLDING_H

#define ARRSIZE "
                !(its.COMBMin)
                "

/*
Based on "
                !(X.CaseFoldingFileName)
                "

Structures created with CaseFolding.bra
*/
struct tri{unsigned int w[3];};
struct quat{unsigned int Unfolded;unsigned int Simple;unsigned int Capital;struct tri * Full;};
extern struct quat Letter[ARRSIZE];
/*
Based on UnicodeData.txt ("
                !(X.UnicodeDataDate)
                ")
(Does not convert final sigma to non-final sigma)

Structures created with CaseFolding.bra
*/

#endif
"
              )
          , "casefolding.h"
          , NEW BIN
          )
      &   put
        $ (   str
            $ ( "/*
LETTERFUNC - Unicode support

Copyright (C) 2012  Center for Sprogteknologi, University of Copenhagen

This file is part of LETTERFUNC.

LETTERFUNC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

LETTERFUNC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with LETTERFUNC; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

// Based on "
                !(X.CaseFoldingFileName)
                "
#include \"casefolding.h\"
struct tri Full["
                !NFulls
                "]={\n"
              )
          , "casefolding.c"
          , NEW BIN
          )
      & !fulls:?all
      & ", ":?sep
      & 0:?i
      &   whl
        ' (   !all
            :   (   %@?w1
                    (   %@?w2
                        ( %@?w3
                        | &0:?w3
                        )
                    | &0:?w2:?w3
                    )
                . ?Comment
                )
              + ?all
          & ( !i+1:!NFulls&"};":?sep
            | 
            )
          &   put
            $ (   str
                $ ( "{{"
                    !w1
                    ","
                    !w2
                    ","
                    !w3
                    "}}"
                    !sep
                    "/*"
                    !Comment
                    "*/"
                    \n
                  )
              , "casefolding.c"
              , APP BIN
              )
          & !i+1:?i
          )
      & !(its.COMB):?all
      & 0:?rij
      &   whl
        ' ( !all:(?Unfolded.?rest)+?all
          & mod$(!Unfolded,!(its.COMBMin)):?adr
          & (!adr.!Unfolded.!rest)+!rij:?rij
          )
      &   put
        $ ( str$(\n "struct quat Letter[ARRSIZE]={
")
          , "casefolding.c"
          , APP BIN
          )
      & 0:?i
      & -1:?curr
      & ", ":?sep
      &   whl
        ' ( (   !curr:<!i
              &   !rij
                :   ( ?curr
                    . ?Unfolded
                    . ?Simple
                    . ?Capital
                    . ?Comment
                    . ?Full
                    )
                  + ?rij
            | !rij:(?.?)+?
            )
          & (   !i+1:!(its.COMBMin)
              & "};":?sep
            | 
            )
          & (   !curr:!i
              &   put
                $ (   str
                    $ ( "{"
                        !Unfolded
                        ","
                        !Simple
                        ","
                        (!Capital:~|0)
                        ","
                        (   !fulls:?+[?offset+(!Full.?)+?
                          & "Full+" !offset
                        | 0L
                        )
                        "}"
                        !sep
                        "/*"
                        !Comment
                        "*/"
                        \n
                      )
                  , "casefolding.c"
                  , APP BIN
                  )
            |   put
              $ ( str$("{0,0,0,0L}" !sep \n)
                , "casefolding.c"
                , APP BIN
                )
            )
          & !i+1:?i
          )
      &   whl
        ' ( !i+1:?i:~>!(its.COMBMin)
          &   (   !i:!(its.COMBMin)
                & "};":?sep
              | 
              )
                put
              $ ( str$("{0,0,0,0L}" !sep \n)
                , "casefolding.c"
                , APP BIN
                )
          )
  )
  ( combine
  =   
    .   0:?COMB
      & out$combine
      & !(its.Common):?L
      &   whl
        ' ( !L:(?unf.?fol.?com)+?L
          &     ( !unf
                . !fol
                .   @(!com:? CAPITAL ?)&!unf
                  | 
                . !com
                . 
                )
              + !COMB
            : ?COMB
          )
      & !(its.Simple):?L
      &   whl
        ' ( !L:(?unf.?fol.?com)+?L
          &     ( !unf
                . !fol
                .   @(!com:? CAPITAL ?)&!unf
                  | 
                . !com
                . 
                )
              + !COMB
            : ?COMB
          )
      & !(its.Turkic):?L
      &   whl
        ' ( !L:(?unf.?fol.?com)+?L
          & (     !COMB
                : ?A+(!unf.?ifol.?icap.?icom.)+?B
              & ( !icom:!com
                |     out
                    $ (different comments !unf !icom and !com)
                  & get'
                )
              &   !A+(!unf.!ifol.!icap.!com.!fol)+!B
                : ?COMB
            |     ( !unf
                  . !fol
                  .     @(!com:? CAPITAL ?)
                      & !unf
                    | 
                  . !com
                  . 
                  )
                + !COMB
              : ?COMB
            )
          )
      & !(its.Full):?L
      &   whl
        ' ( !L:(?unf.?folfull.?com)+?L
          & (     !COMB
                : ?A+(!unf.?ifol.?icap.?icom.?ifolfull)+?B
              & ( !ifolfull:
                | out$(twice full !unf)&get'
                )
              & ( !icom:!com
                |     out
                    $ (different comments !unf !icom and !com)
                  & get'
                )
              &   !A+(!unf.!ifol.!icap.!com.!folfull)+!B
                : ?COMB
            |     ( !unf
                  .   @(!com:? SMALL ?)&!unf
                    | 
                  .     @(!com:? CAPITAL ?)
                      & !unf
                    | 
                  . !com
                  . !folfull
                  )
                + !COMB
              : ?COMB
            )
          )
      & 0:?LOW
      & !COMB:?L
      &   whl
        ' ( !L:(?iunf.?ifol.?icap.?icom.?ifolfull)+?L
          & (   @(!icom:?A " CAPITAL" ?B)
              & ( !COMB:?+(!ifol.?)+?
                | !LOW:?+(!ifol.?)+?
                | !ifolfull:%@:~
                |     ( !ifol
                      . !ifol
                      . !icap
                      . str$(!A !B)
                      . !ifolfull
                      )
                    + !LOW
                  : ?LOW
                )
            | 
            )
          )
      & !COMB:?L
      &   whl
        ' ( !L:(?iunf.?ifol.?icap.?icom.?ifolfull)+?L
          & (   @(!icom:?A " CAPITAL" ?B)
              & !ifolfull:#@
              & ( !COMB:?+(!ifolfull.?)+?
                | !LOW:?+(!ifolfull.?)+?
                |     ( !ifolfull
                      . !ifolfull
                      . !icap
                      . str$(!A !B)
                      . !ifolfull
                      )
                    + !LOW
                  : ?LOW
                )
            | 
            )
          )
      & lst$(LOW,LOW,NEW BIN)
      & !LOW+!COMB:?COMB
      & lst$(COMB,COMB,NEW BIN)
      & !COMB
  )
  ( new
  =   
    .   ~
      |     0
          : ?(its.Small2Capital)
          : ?(its.Full)
          : ?(its.Simple)
          : ?(its.Turkic)
          : ?(its.Common)
        & ( ~
          |   ( (its.readFile)$!(X.CaseFoldingFileName)
              | (its.readFile)$"CaseFolding-6.0.0.txt"
              | (its.readFile)$"CaseFolding-5.2.0.txt"
              | (its.readFile)$"CaseFolding-3.2.0.txt"
              )
            & out$readFileDone
            & (its.combine)$:?(its.COMB)
            & (its.count)$!(its.COMB):?(its.COMBN)
            & out$("(its.COMBN)" !(its.COMBN))
            &   (its.store)$!(its.COMB)
              : (?(its.COMBMin).?)
            & out$("(its.COMBMin)" !(its.COMBMin))
          )
        & (its.2html)$
        & out$2htmlDone
        & (its.writeC)$
        & DONE
  );

r=
  get'"CaseFolding.bra"
& rmv$"CaseFolding.bak"
& ren$("CaseFolding.bra"."CaseFolding.bak")
&   put
  $ (   str
      $ ( "{CaseFolding.bra

Read "
          !(X.CaseFoldingFileName)
          " and convert to Full and Simple tables in C.

Produces 
    casefolding.h
    casefolding.c
    
and also
    CaseFolding.html,
    LOW
    COMB
    
You need to install Bracmat to run this script:

    git clone https://github.com/BartJongejan/Bracmat.git
    
After installing, start bracmat and then, after the prompt, type:

    get$\"Casefolding.bra\"
}

"
        )
    , "CaseFolding.bra"
    , NEW BIN
    )
& lst'(X,"CaseFolding.bra",APP BIN)
& put'(\n,"CaseFolding.bra",APP BIN)
& lst'(r,"CaseFolding.bra",APP BIN)
& put$(str$("\nnew'" X "&;\n"),"CaseFolding.bra",APP BIN)
& done;

new'X&;
